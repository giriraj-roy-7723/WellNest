{
  "address": "0x669B32e56D63D3705603528E7F18df5645bB8968",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blockReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "increasedSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "ERC20ExceededCap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "ERC20InvalidCap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensSpent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getSpendableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getblockReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockReward",
          "type": "uint256"
        }
      ],
      "name": "setBlockReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setUserReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "spend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x82c3e964b738409f00407ed241c8dfd43346f16556426ee88b5add0ac730a5f6",
  "receipt": {
    "to": null,
    "from": "0xB35203240DEC93E961793A8e5b21Ef10D0022F06",
    "contractAddress": "0x669B32e56D63D3705603528E7F18df5645bB8968",
    "transactionIndex": 39,
    "gasUsed": "1783263",
    "logsBloom": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000400000000000000000000800000000000000000000000000000000000000000000000002000000000000000000080000000000000000000000001000100000000000000000000000000800000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000200000000000000000000000000000000000000008a000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb846d8272446e35cc40c0c42641c6f2e4dc12b89e2fa156164a355d558aeabd9",
    "transactionHash": "0x82c3e964b738409f00407ed241c8dfd43346f16556426ee88b5add0ac730a5f6",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 8992125,
        "transactionHash": "0x82c3e964b738409f00407ed241c8dfd43346f16556426ee88b5add0ac730a5f6",
        "address": "0x669B32e56D63D3705603528E7F18df5645bB8968",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f2f5c73fa04406b1995e397b55c24ab1f3ea726c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 68,
        "blockHash": "0xb846d8272446e35cc40c0c42641c6f2e4dc12b89e2fa156164a355d558aeabd9"
      },
      {
        "transactionIndex": 39,
        "blockNumber": 8992125,
        "transactionHash": "0x82c3e964b738409f00407ed241c8dfd43346f16556426ee88b5add0ac730a5f6",
        "address": "0x669B32e56D63D3705603528E7F18df5645bB8968",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b35203240dec93e961793a8e5b21ef10d0022f06"
        ],
        "data": "0x00000000000000000000000000000000000000000039e7139a8c08fa06000000",
        "logIndex": 69,
        "blockHash": "0xb846d8272446e35cc40c0c42641c6f2e4dc12b89e2fa156164a355d558aeabd9"
      }
    ],
    "blockNumber": 8992125,
    "cumulativeGasUsed": "8979390",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000",
    "50",
    "70000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "396245d3c6c0815f0d4585e8fc3473de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20InvalidCap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSpent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSpendableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getblockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockReward\",\"type\":\"uint256\"}],\"name\":\"setBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setUserReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"spend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20ExceededCap(uint256,uint256)\":[{\"details\":\"Total supply cap has been exceeded.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidCap(uint256)\":[{\"details\":\"The supplied cap is not a valid cap.\"}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WellNestToken.sol\":\"WellNestToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/ERC20Capped.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 private immutable _cap;\\n\\n    /**\\n     * @dev Total supply cap has been exceeded.\\n     */\\n    error ERC20ExceededCap(uint256 increasedSupply, uint256 cap);\\n\\n    /**\\n     * @dev The supplied cap is not a valid cap.\\n     */\\n    error ERC20InvalidCap(uint256 cap);\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor(uint256 cap_) {\\n        if (cap_ == 0) {\\n            revert ERC20InvalidCap(0);\\n        }\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /// @inheritdoc ERC20\\n    function _update(address from, address to, uint256 value) internal virtual override {\\n        super._update(from, to, value);\\n\\n        if (from == address(0)) {\\n            uint256 maxSupply = cap();\\n            uint256 supply = totalSupply();\\n            if (supply > maxSupply) {\\n                revert ERC20ExceededCap(supply, maxSupply);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf1c07010528cdb891c75866dd44cf5cd856573457127ec38a522ca748407a340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/WellNestToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {ERC20Capped} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\\\";\\r\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\n\\r\\n// ERC20Capped inherits from ERC20\\r\\ncontract WellNestToken is ERC20Capped, ERC20Burnable {\\r\\n    address payable private s_owner;\\r\\n    uint256 private blockReward;\\r\\n    mapping(address => uint256) public claimableRewards;\\r\\n\\r\\n    // Events for better tracking\\r\\n    event TokensSpent(address indexed spender, uint256 amount);\\r\\n    event RewardClaimed(address indexed claimer, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        uint256 _cap,\\r\\n        uint256 _blockReward,\\r\\n        uint256 _initialSupply\\r\\n    ) ERC20(\\\"WellNestToken\\\", \\\"WNT\\\") ERC20Capped(_cap * (10 ** decimals())) {\\r\\n        s_owner = payable(msg.sender);\\r\\n        _mint(msg.sender, _initialSupply * (10 ** decimals()));\\r\\n        blockReward = _blockReward * (10 ** decimals());\\r\\n    }\\r\\n\\r\\n    // Override required by Solidity when inheriting from multiple contracts\\r\\n    function _update(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal override(ERC20, ERC20Capped) {\\r\\n        // Mint miner reward before processing the transfer if needed\\r\\n        if (\\r\\n            from == address(0) &&\\r\\n            to != block.coinbase &&\\r\\n            block.coinbase != address(0)\\r\\n        ) {\\r\\n            _mintMinerReward();\\r\\n        }\\r\\n\\r\\n        //must be included\\r\\n        super._update(from, to, value);\\r\\n    }\\r\\n\\r\\n    function setUserReward(address user, uint256 amount) external onlyOwner {\\r\\n        claimableRewards[user] += amount;\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        uint256 amount = claimableRewards[msg.sender];\\r\\n        require(amount > 0, \\\"No reward to claim\\\");\\r\\n        claimableRewards[msg.sender] = 0; // Reset before sending to prevent re-claiming\\r\\n        _transfer(s_owner, msg.sender, amount); // Transfer from owner to user\\r\\n\\r\\n        emit RewardClaimed(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    // Function for users to spend tokens - transfers tokens back to owner\\r\\n    function spend(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(\\r\\n            balanceOf(msg.sender) >= amount,\\r\\n            \\\"Insufficient balance to spend\\\"\\r\\n        );\\r\\n\\r\\n        _transfer(msg.sender, s_owner, amount);\\r\\n\\r\\n        emit TokensSpent(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function _mintMinerReward() internal {\\r\\n        _mint(block.coinbase, blockReward); //block.coinbase == who mined the block\\r\\n    }\\r\\n\\r\\n    function setBlockReward(uint256 _blockReward) public onlyOwner {\\r\\n        blockReward = _blockReward * (10 ** decimals());\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return s_owner;\\r\\n    }\\r\\n\\r\\n    function getblockReward() public view returns (uint256) {\\r\\n        return blockReward;\\r\\n    }\\r\\n\\r\\n    function getUserReward(address user) external view returns (uint256) {\\r\\n        return claimableRewards[user];\\r\\n    }\\r\\n\\r\\n    // Get user's spendable balance\\r\\n    function getSpendableBalance(address user) external view returns (uint256) {\\r\\n        return balanceOf(user);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == s_owner, \\\"Only the owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fdfa7967f6552c1e6020f24775e084d4cbad900ab1a53df38040bee9a1a1915\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161294238038061294283398181016040528101906100329190610678565b6100406101dc60201b60201c565b600a61004c919061083a565b836100579190610885565b6040518060400160405280600d81526020017f57656c6c4e657374546f6b656e000000000000000000000000000000000000008152506040518060400160405280600381526020017f574e54000000000000000000000000000000000000000000000000000000000081525081600390816100d29190610b0d565b5080600490816100e29190610b0d565b5050506000810361012b5760006040517f392e1e270000000000000000000000000000000000000000000000000000000081526004016101229190610c1a565b60405180910390fd5b80608081815250505033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101a9336101876101dc60201b60201c565b600a610193919061083a565b8361019e9190610885565b6101e560201b60201c565b6101b76101dc60201b60201c565b600a6101c3919061083a565b826101ce9190610885565b600681905550505050610d4f565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036102575760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161024e9190610c76565b60405180910390fd5b6102696000838361026d60201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156102d557504173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b801561030e5750600073ffffffffffffffffffffffffffffffffffffffff164173ffffffffffffffffffffffffffffffffffffffff1614155b156103225761032161033860201b60201c565b5b61033383838361034c60201b60201c565b505050565b61034a416006546101e560201b60201c565b565b61035d83838361040460201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036103ff5760006103a161062960201b60201c565b905060006103b361063360201b60201c565b9050818111156103fc5780826040517f9e79f8540000000000000000000000000000000000000000000000000000000081526004016103f3929190610ca0565b60405180910390fd5b50505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361045657806002600082825461044a9190610cc9565b92505081905550610529565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156104e2578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016104d993929190610cfd565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361057257806002600082825403925050819055506105bf565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161061c9190610d34565b60405180910390a3505050565b6000608051905090565b6000600254905090565b600080fd5b6000819050919050565b61065581610642565b811461066057600080fd5b50565b6000815190506106728161064c565b92915050565b6000806000606084860312156106915761069061063d565b5b600061069f86828701610663565b93505060206106b086828701610663565b92505060406106c186828701610663565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156107515780860481111561072d5761072c6106cb565b5b600185161561073c5780820291505b808102905061074a856106fa565b9450610711565b94509492505050565b60008261076a5760019050610826565b816107785760009050610826565b816001811461078e5760028114610798576107c7565b6001915050610826565b60ff8411156107aa576107a96106cb565b5b8360020a9150848211156107c1576107c06106cb565b5b50610826565b5060208310610133831016604e8410600b84101617156107fc5782820a9050838111156107f7576107f66106cb565b5b610826565b6108098484846001610707565b925090508184048111156108205761081f6106cb565b5b81810290505b9392505050565b600060ff82169050919050565b600061084582610642565b91506108508361082d565b925061087d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461075a565b905092915050565b600061089082610642565b915061089b83610642565b92508282026108a981610642565b915082820484148315176108c0576108bf6106cb565b5b5092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061094857607f821691505b60208210810361095b5761095a610901565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026109c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610986565b6109cd8683610986565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610a0a610a05610a0084610642565b6109e5565b610642565b9050919050565b6000819050919050565b610a24836109ef565b610a38610a3082610a11565b848454610993565b825550505050565b600090565b610a4d610a40565b610a58818484610a1b565b505050565b5b81811015610a7c57610a71600082610a45565b600181019050610a5e565b5050565b601f821115610ac157610a9281610961565b610a9b84610976565b81016020851015610aaa578190505b610abe610ab685610976565b830182610a5d565b50505b505050565b600082821c905092915050565b6000610ae460001984600802610ac6565b1980831691505092915050565b6000610afd8383610ad3565b9150826002028217905092915050565b610b16826108c7565b67ffffffffffffffff811115610b2f57610b2e6108d2565b5b610b398254610930565b610b44828285610a80565b600060209050601f831160018114610b775760008415610b65578287015190505b610b6f8582610af1565b865550610bd7565b601f198416610b8586610961565b60005b82811015610bad57848901518255600182019150602085019450602081019050610b88565b86831015610bca5784890151610bc6601f891682610ad3565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b6000610c04610bff610bfa84610bdf565b6109e5565b610642565b9050919050565b610c1481610be9565b82525050565b6000602082019050610c2f6000830184610c0b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c6082610c35565b9050919050565b610c7081610c55565b82525050565b6000602082019050610c8b6000830184610c67565b92915050565b610c9a81610642565b82525050565b6000604082019050610cb56000830185610c91565b610cc26020830184610c91565b9392505050565b6000610cd482610642565b9150610cdf83610642565b9250828201905080821115610cf757610cf66106cb565b5b92915050565b6000606082019050610d126000830186610c67565b610d1f6020830185610c91565b610d2c6040830184610c91565b949350505050565b6000602082019050610d496000830184610c91565b92915050565b608051611bd8610d6a60003960006106ff0152611bd86000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806342966c68116100b8578063893d20e81161007c578063893d20e81461032857806395d89b4114610346578063a9059cbb14610364578063c75ebb8214610394578063dc01f60d146103c4578063dd62ed3e146103f457610137565b806342966c681461029a5780634e71d92d146102b657806365ce8681146102c057806370a08231146102dc57806379cc67901461030c57610137565b80631dbf3bc7116100ff5780631dbf3bc7146101e257806323b872dd146101fe578063313ce5671461022e5780633345906f1461024c578063355274ea1461027c57610137565b806306fdde031461013c578063095ea7b31461015a5780631474333b1461018a57806318160ddd146101a85780631a18e707146101c6575b600080fd5b610144610424565b6040516101519190611440565b60405180910390f35b610174600480360381019061016f91906114fb565b6104b6565b6040516101819190611556565b60405180910390f35b6101926104d9565b60405161019f9190611580565b60405180910390f35b6101b06104e3565b6040516101bd9190611580565b60405180910390f35b6101e060048036038101906101db919061159b565b6104ed565b005b6101fc60048036038101906101f7919061159b565b6105a5565b005b610218600480360381019061021391906115c8565b6106b1565b6040516102259190611556565b60405180910390f35b6102366106e0565b6040516102439190611637565b60405180910390f35b61026660048036038101906102619190611652565b6106e9565b6040516102739190611580565b60405180910390f35b6102846106fb565b6040516102919190611580565b60405180910390f35b6102b460048036038101906102af919061159b565b610723565b005b6102be610737565b005b6102da60048036038101906102d591906114fb565b610881565b005b6102f660048036038101906102f19190611652565b61096b565b6040516103039190611580565b60405180910390f35b610326600480360381019061032191906114fb565b6109b3565b005b6103306109d3565b60405161033d919061168e565b60405180910390f35b61034e6109fd565b60405161035b9190611440565b60405180910390f35b61037e600480360381019061037991906114fb565b610a8f565b60405161038b9190611556565b60405180910390f35b6103ae60048036038101906103a99190611652565b610ab2565b6040516103bb9190611580565b60405180910390f35b6103de60048036038101906103d99190611652565b610afb565b6040516103eb9190611580565b60405180910390f35b61040e600480360381019061040991906116a9565b610b13565b60405161041b9190611580565b60405180910390f35b60606003805461043390611718565b80601f016020809104026020016040519081016040528092919081815260200182805461045f90611718565b80156104ac5780601f10610481576101008083540402835291602001916104ac565b820191906000526020600020905b81548152906001019060200180831161048f57829003601f168201915b5050505050905090565b6000806104c1610b9a565b90506104ce818585610ba2565b600191505092915050565b6000600654905090565b6000600254905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461057d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610574906117bb565b60405180910390fd5b6105856106e0565b600a610591919061193d565b8161059c9190611988565b60068190555050565b600081116105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df90611a16565b60405180910390fd5b806105f23361096b565b1015610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a90611a82565b60405180910390fd5b61066033600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610bb4565b3373ffffffffffffffffffffffffffffffffffffffff167f2efa3c8729bb4709645a357fcbdacbae23c038445bdb417a51d8c1dcc68be465826040516106a69190611580565b60405180910390a250565b6000806106bc610b9a565b90506106c9858285610ca8565b6106d4858585610bb4565b60019150509392505050565b60006012905090565b60006106f48261096b565b9050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61073461072e610b9a565b82610d3d565b50565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b590611aee565b60405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610830600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383610bb4565b3373ffffffffffffffffffffffffffffffffffffffff167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241826040516108769190611580565b60405180910390a250565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610911576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610908906117bb565b60405180910390fd5b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109609190611b0e565b925050819055505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109c5826109bf610b9a565b83610ca8565b6109cf8282610d3d565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610a0c90611718565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3890611718565b8015610a855780601f10610a5a57610100808354040283529160200191610a85565b820191906000526020600020905b815481529060010190602001808311610a6857829003601f168201915b5050505050905090565b600080610a9a610b9a565b9050610aa7818585610bb4565b600191505092915050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60076020528060005260406000206000915090505481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b610baf8383836001610dbf565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c265760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610c1d919061168e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c985760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610c8f919061168e565b60405180910390fd5b610ca3838383610f96565b505050565b6000610cb48484610b13565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610d375781811015610d27578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610d1e93929190611b42565b60405180910390fd5b610d3684848484036000610dbf565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610daf5760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610da6919061168e565b60405180910390fd5b610dbb82600083610f96565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610e315760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610e28919061168e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ea35760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610e9a919061168e565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610f90578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610f879190611580565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015610ffe57504173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156110375750600073ffffffffffffffffffffffffffffffffffffffff164173ffffffffffffffffffffffffffffffffffffffff1614155b1561104557611044611055565b5b611050838383611063565b505050565b61106141600654611109565b565b61106e83838361118b565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111045760006110ac6106fb565b905060006110b86104e3565b9050818111156111015780826040517f9e79f8540000000000000000000000000000000000000000000000000000000081526004016110f8929190611b79565b60405180910390fd5b50505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361117b5760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401611172919061168e565b60405180910390fd5b61118760008383610f96565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111dd5780600260008282546111d19190611b0e565b925050819055506112b0565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611269578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161126093929190611b42565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112f95780600260008282540392505081905550611346565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113a39190611580565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113ea5780820151818401526020810190506113cf565b60008484015250505050565b6000601f19601f8301169050919050565b6000611412826113b0565b61141c81856113bb565b935061142c8185602086016113cc565b611435816113f6565b840191505092915050565b6000602082019050818103600083015261145a8184611407565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061149282611467565b9050919050565b6114a281611487565b81146114ad57600080fd5b50565b6000813590506114bf81611499565b92915050565b6000819050919050565b6114d8816114c5565b81146114e357600080fd5b50565b6000813590506114f5816114cf565b92915050565b6000806040838503121561151257611511611462565b5b6000611520858286016114b0565b9250506020611531858286016114e6565b9150509250929050565b60008115159050919050565b6115508161153b565b82525050565b600060208201905061156b6000830184611547565b92915050565b61157a816114c5565b82525050565b60006020820190506115956000830184611571565b92915050565b6000602082840312156115b1576115b0611462565b5b60006115bf848285016114e6565b91505092915050565b6000806000606084860312156115e1576115e0611462565b5b60006115ef868287016114b0565b9350506020611600868287016114b0565b9250506040611611868287016114e6565b9150509250925092565b600060ff82169050919050565b6116318161161b565b82525050565b600060208201905061164c6000830184611628565b92915050565b60006020828403121561166857611667611462565b5b6000611676848285016114b0565b91505092915050565b61168881611487565b82525050565b60006020820190506116a3600083018461167f565b92915050565b600080604083850312156116c0576116bf611462565b5b60006116ce858286016114b0565b92505060206116df858286016114b0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061173057607f821691505b602082108103611743576117426116e9565b5b50919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b60006117a56025836113bb565b91506117b082611749565b604082019050919050565b600060208201905081810360008301526117d481611798565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156118615780860481111561183d5761183c6117db565b5b600185161561184c5780820291505b808102905061185a8561180a565b9450611821565b94509492505050565b60008261187a5760019050611936565b816118885760009050611936565b816001811461189e57600281146118a8576118d7565b6001915050611936565b60ff8411156118ba576118b96117db565b5b8360020a9150848211156118d1576118d06117db565b5b50611936565b5060208310610133831016604e8410600b841016171561190c5782820a905083811115611907576119066117db565b5b611936565b6119198484846001611817565b925090508184048111156119305761192f6117db565b5b81810290505b9392505050565b6000611948826114c5565b91506119538361161b565b92506119807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461186a565b905092915050565b6000611993826114c5565b915061199e836114c5565b92508282026119ac816114c5565b915082820484148315176119c3576119c26117db565b5b5092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b6000611a00601d836113bb565b9150611a0b826119ca565b602082019050919050565b60006020820190508181036000830152611a2f816119f3565b9050919050565b7f496e73756666696369656e742062616c616e636520746f207370656e64000000600082015250565b6000611a6c601d836113bb565b9150611a7782611a36565b602082019050919050565b60006020820190508181036000830152611a9b81611a5f565b9050919050565b7f4e6f2072657761726420746f20636c61696d0000000000000000000000000000600082015250565b6000611ad86012836113bb565b9150611ae382611aa2565b602082019050919050565b60006020820190508181036000830152611b0781611acb565b9050919050565b6000611b19826114c5565b9150611b24836114c5565b9250828201905080821115611b3c57611b3b6117db565b5b92915050565b6000606082019050611b57600083018661167f565b611b646020830185611571565b611b716040830184611571565b949350505050565b6000604082019050611b8e6000830185611571565b611b9b6020830184611571565b939250505056fea2646970667358221220a1e501525fbcae57dfc332cdafe5815d65ccb52736e5f87b6793280f361226b564736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806342966c68116100b8578063893d20e81161007c578063893d20e81461032857806395d89b4114610346578063a9059cbb14610364578063c75ebb8214610394578063dc01f60d146103c4578063dd62ed3e146103f457610137565b806342966c681461029a5780634e71d92d146102b657806365ce8681146102c057806370a08231146102dc57806379cc67901461030c57610137565b80631dbf3bc7116100ff5780631dbf3bc7146101e257806323b872dd146101fe578063313ce5671461022e5780633345906f1461024c578063355274ea1461027c57610137565b806306fdde031461013c578063095ea7b31461015a5780631474333b1461018a57806318160ddd146101a85780631a18e707146101c6575b600080fd5b610144610424565b6040516101519190611440565b60405180910390f35b610174600480360381019061016f91906114fb565b6104b6565b6040516101819190611556565b60405180910390f35b6101926104d9565b60405161019f9190611580565b60405180910390f35b6101b06104e3565b6040516101bd9190611580565b60405180910390f35b6101e060048036038101906101db919061159b565b6104ed565b005b6101fc60048036038101906101f7919061159b565b6105a5565b005b610218600480360381019061021391906115c8565b6106b1565b6040516102259190611556565b60405180910390f35b6102366106e0565b6040516102439190611637565b60405180910390f35b61026660048036038101906102619190611652565b6106e9565b6040516102739190611580565b60405180910390f35b6102846106fb565b6040516102919190611580565b60405180910390f35b6102b460048036038101906102af919061159b565b610723565b005b6102be610737565b005b6102da60048036038101906102d591906114fb565b610881565b005b6102f660048036038101906102f19190611652565b61096b565b6040516103039190611580565b60405180910390f35b610326600480360381019061032191906114fb565b6109b3565b005b6103306109d3565b60405161033d919061168e565b60405180910390f35b61034e6109fd565b60405161035b9190611440565b60405180910390f35b61037e600480360381019061037991906114fb565b610a8f565b60405161038b9190611556565b60405180910390f35b6103ae60048036038101906103a99190611652565b610ab2565b6040516103bb9190611580565b60405180910390f35b6103de60048036038101906103d99190611652565b610afb565b6040516103eb9190611580565b60405180910390f35b61040e600480360381019061040991906116a9565b610b13565b60405161041b9190611580565b60405180910390f35b60606003805461043390611718565b80601f016020809104026020016040519081016040528092919081815260200182805461045f90611718565b80156104ac5780601f10610481576101008083540402835291602001916104ac565b820191906000526020600020905b81548152906001019060200180831161048f57829003601f168201915b5050505050905090565b6000806104c1610b9a565b90506104ce818585610ba2565b600191505092915050565b6000600654905090565b6000600254905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461057d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610574906117bb565b60405180910390fd5b6105856106e0565b600a610591919061193d565b8161059c9190611988565b60068190555050565b600081116105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df90611a16565b60405180910390fd5b806105f23361096b565b1015610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a90611a82565b60405180910390fd5b61066033600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610bb4565b3373ffffffffffffffffffffffffffffffffffffffff167f2efa3c8729bb4709645a357fcbdacbae23c038445bdb417a51d8c1dcc68be465826040516106a69190611580565b60405180910390a250565b6000806106bc610b9a565b90506106c9858285610ca8565b6106d4858585610bb4565b60019150509392505050565b60006012905090565b60006106f48261096b565b9050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61073461072e610b9a565b82610d3d565b50565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b590611aee565b60405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610830600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383610bb4565b3373ffffffffffffffffffffffffffffffffffffffff167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241826040516108769190611580565b60405180910390a250565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610911576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610908906117bb565b60405180910390fd5b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109609190611b0e565b925050819055505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109c5826109bf610b9a565b83610ca8565b6109cf8282610d3d565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610a0c90611718565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3890611718565b8015610a855780601f10610a5a57610100808354040283529160200191610a85565b820191906000526020600020905b815481529060010190602001808311610a6857829003601f168201915b5050505050905090565b600080610a9a610b9a565b9050610aa7818585610bb4565b600191505092915050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60076020528060005260406000206000915090505481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b610baf8383836001610dbf565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c265760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610c1d919061168e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c985760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610c8f919061168e565b60405180910390fd5b610ca3838383610f96565b505050565b6000610cb48484610b13565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610d375781811015610d27578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610d1e93929190611b42565b60405180910390fd5b610d3684848484036000610dbf565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610daf5760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610da6919061168e565b60405180910390fd5b610dbb82600083610f96565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610e315760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610e28919061168e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ea35760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610e9a919061168e565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610f90578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610f879190611580565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015610ffe57504173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156110375750600073ffffffffffffffffffffffffffffffffffffffff164173ffffffffffffffffffffffffffffffffffffffff1614155b1561104557611044611055565b5b611050838383611063565b505050565b61106141600654611109565b565b61106e83838361118b565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111045760006110ac6106fb565b905060006110b86104e3565b9050818111156111015780826040517f9e79f8540000000000000000000000000000000000000000000000000000000081526004016110f8929190611b79565b60405180910390fd5b50505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361117b5760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401611172919061168e565b60405180910390fd5b61118760008383610f96565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111dd5780600260008282546111d19190611b0e565b925050819055506112b0565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611269578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161126093929190611b42565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112f95780600260008282540392505081905550611346565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113a39190611580565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113ea5780820151818401526020810190506113cf565b60008484015250505050565b6000601f19601f8301169050919050565b6000611412826113b0565b61141c81856113bb565b935061142c8185602086016113cc565b611435816113f6565b840191505092915050565b6000602082019050818103600083015261145a8184611407565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061149282611467565b9050919050565b6114a281611487565b81146114ad57600080fd5b50565b6000813590506114bf81611499565b92915050565b6000819050919050565b6114d8816114c5565b81146114e357600080fd5b50565b6000813590506114f5816114cf565b92915050565b6000806040838503121561151257611511611462565b5b6000611520858286016114b0565b9250506020611531858286016114e6565b9150509250929050565b60008115159050919050565b6115508161153b565b82525050565b600060208201905061156b6000830184611547565b92915050565b61157a816114c5565b82525050565b60006020820190506115956000830184611571565b92915050565b6000602082840312156115b1576115b0611462565b5b60006115bf848285016114e6565b91505092915050565b6000806000606084860312156115e1576115e0611462565b5b60006115ef868287016114b0565b9350506020611600868287016114b0565b9250506040611611868287016114e6565b9150509250925092565b600060ff82169050919050565b6116318161161b565b82525050565b600060208201905061164c6000830184611628565b92915050565b60006020828403121561166857611667611462565b5b6000611676848285016114b0565b91505092915050565b61168881611487565b82525050565b60006020820190506116a3600083018461167f565b92915050565b600080604083850312156116c0576116bf611462565b5b60006116ce858286016114b0565b92505060206116df858286016114b0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061173057607f821691505b602082108103611743576117426116e9565b5b50919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b60006117a56025836113bb565b91506117b082611749565b604082019050919050565b600060208201905081810360008301526117d481611798565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156118615780860481111561183d5761183c6117db565b5b600185161561184c5780820291505b808102905061185a8561180a565b9450611821565b94509492505050565b60008261187a5760019050611936565b816118885760009050611936565b816001811461189e57600281146118a8576118d7565b6001915050611936565b60ff8411156118ba576118b96117db565b5b8360020a9150848211156118d1576118d06117db565b5b50611936565b5060208310610133831016604e8410600b841016171561190c5782820a905083811115611907576119066117db565b5b611936565b6119198484846001611817565b925090508184048111156119305761192f6117db565b5b81810290505b9392505050565b6000611948826114c5565b91506119538361161b565b92506119807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461186a565b905092915050565b6000611993826114c5565b915061199e836114c5565b92508282026119ac816114c5565b915082820484148315176119c3576119c26117db565b5b5092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b6000611a00601d836113bb565b9150611a0b826119ca565b602082019050919050565b60006020820190508181036000830152611a2f816119f3565b9050919050565b7f496e73756666696369656e742062616c616e636520746f207370656e64000000600082015250565b6000611a6c601d836113bb565b9150611a7782611a36565b602082019050919050565b60006020820190508181036000830152611a9b81611a5f565b9050919050565b7f4e6f2072657761726420746f20636c61696d0000000000000000000000000000600082015250565b6000611ad86012836113bb565b9150611ae382611aa2565b602082019050919050565b60006020820190508181036000830152611b0781611acb565b9050919050565b6000611b19826114c5565b9150611b24836114c5565b9250828201905080821115611b3c57611b3b6117db565b5b92915050565b6000606082019050611b57600083018661167f565b611b646020830185611571565b611b716040830184611571565b949350505050565b6000604082019050611b8e6000830185611571565b611b9b6020830184611571565b939250505056fea2646970667358221220a1e501525fbcae57dfc332cdafe5815d65ccb52736e5f87b6793280f361226b564736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "ERC20ExceededCap(uint256,uint256)": [
        {
          "details": "Total supply cap has been exceeded."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidCap(uint256)": [
        {
          "details": "The supplied cap is not a valid cap."
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "Returns the value of tokens owned by `account`."
      },
      "burn(uint256)": {
        "details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
      },
      "cap()": {
        "details": "Returns the cap on the token's total supply."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "Returns the value of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 159,
        "contract": "contracts/WellNestToken.sol:WellNestToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 165,
        "contract": "contracts/WellNestToken.sol:WellNestToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 167,
        "contract": "contracts/WellNestToken.sol:WellNestToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/WellNestToken.sol:WellNestToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/WellNestToken.sol:WellNestToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 944,
        "contract": "contracts/WellNestToken.sol:WellNestToken",
        "label": "s_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address_payable"
      },
      {
        "astId": 946,
        "contract": "contracts/WellNestToken.sol:WellNestToken",
        "label": "blockReward",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 950,
        "contract": "contracts/WellNestToken.sol:WellNestToken",
        "label": "claimableRewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}